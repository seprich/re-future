// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function make(delegateFn) {
  var promise = {
    value: undefined,
    fnChain: /* [] */0
  };
  Curry._1(delegateFn, (function (param) {
          var promise$1 = promise;
          var value = param;
          if (Belt_Option.isSome(promise$1.value)) {
            Pervasives.failwith("Future value can be set only once - subsequent setter calls rejected");
          }
          promise$1.value = Caml_option.some(value);
          Belt_List.forEach(promise$1.fnChain, (function (fn) {
                  return setTimeout((function (param) {
                                return Curry._1(fn, value);
                              }), 0);
                }));
          promise$1.fnChain = /* [] */0;
          return /* () */0;
        }));
  return promise;
}

function fromValue(value) {
  return {
          value: Caml_option.some(value),
          fnChain: /* [] */0
        };
}

function addChainFn_(future, chainFn) {
  var match = future.value;
  if (match !== undefined) {
    return Curry._1(chainFn, Caml_option.valFromOption(match));
  } else {
    future.fnChain = /* :: */[
      chainFn,
      future.fnChain
    ];
    return /* () */0;
  }
}

function flatMap(future, fn) {
  return make((function (setter) {
                return addChainFn_(future, (function (v) {
                              return addChainFn_(Curry._1(fn, v), setter);
                            }));
              }));
}

function map(future, fn) {
  return make((function (setter) {
                return addChainFn_(future, (function (v) {
                              return Curry._1(setter, Curry._1(fn, v));
                            }));
              }));
}

function effect(future, fn) {
  return make((function (setter) {
                return addChainFn_(future, (function (v) {
                              Curry._1(fn, v);
                              return Curry._1(setter, v);
                            }));
              }));
}

function waitEffect(future, fn) {
  return flatMap(future, (function (value) {
                return map(Curry._1(fn, value), (function (param) {
                              return value;
                            }));
              }));
}

function all(listOfFutures) {
  return Belt_List.reduceReverse(listOfFutures, {
              value: /* [] */0,
              fnChain: /* [] */0
            }, (function (accumulator, future) {
                return flatMap(future, (function (result) {
                              return map(accumulator, (function (results) {
                                            return /* :: */[
                                                    result,
                                                    results
                                                  ];
                                          }));
                            }));
              }));
}

function map2(f1, f2, fn) {
  return flatMap(f1, (function (r1) {
                return map(f2, (function (r2) {
                              return Curry._2(fn, r1, r2);
                            }));
              }));
}

function map3(f1, f2, f3, fn) {
  return flatMap(f1, (function (r1) {
                return flatMap(f2, (function (r2) {
                              return map(f3, (function (r3) {
                                            return Curry._3(fn, r1, r2, r3);
                                          }));
                            }));
              }));
}

function map4(f1, f2, f3, f4, fn) {
  return flatMap(f1, (function (r1) {
                return flatMap(f2, (function (r2) {
                              return flatMap(f3, (function (r3) {
                                            return map(f4, (function (r4) {
                                                          return Curry._4(fn, r1, r2, r3, r4);
                                                        }));
                                          }));
                            }));
              }));
}

function map5(f1, f2, f3, f4, f5, fn) {
  return flatMap(f1, (function (r1) {
                return flatMap(f2, (function (r2) {
                              return flatMap(f3, (function (r3) {
                                            return flatMap(f4, (function (r4) {
                                                          return map(f5, (function (r5) {
                                                                        return Curry._5(fn, r1, r2, r3, r4, r5);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function map6(f1, f2, f3, f4, f5, f6, fn) {
  return flatMap(f1, (function (r1) {
                return flatMap(f2, (function (r2) {
                              return flatMap(f3, (function (r3) {
                                            return flatMap(f4, (function (r4) {
                                                          return flatMap(f5, (function (r5) {
                                                                        return map(f6, (function (r6) {
                                                                                      return Curry._6(fn, r1, r2, r3, r4, r5, r6);
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function toPromise(future) {
  return new Promise((function (resolve, param) {
                return addChainFn_(future, (function (value) {
                              return resolve(value);
                            }));
              }));
}

var get = addChainFn_;

exports.make = make;
exports.fromValue = fromValue;
exports.map = map;
exports.flatMap = flatMap;
exports.effect = effect;
exports.waitEffect = waitEffect;
exports.all = all;
exports.map2 = map2;
exports.map3 = map3;
exports.map4 = map4;
exports.map5 = map5;
exports.map6 = map6;
exports.get = get;
exports.toPromise = toPromise;
/* No side effect */
