// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Future$SeprichReFuture = require("./Future.bs.js");

function make(delegateFn) {
  return Future$SeprichReFuture.make((function (setter) {
                var resolveCb = function (value) {
                  return Curry._1(setter, /* Ok */Block.__(0, [value]));
                };
                var rejectCb = function (value) {
                  return Curry._1(setter, /* Error */Block.__(1, [value]));
                };
                return Curry._2(delegateFn, resolveCb, rejectCb);
              }));
}

function fromValue(value) {
  return Future$SeprichReFuture.fromValue(/* Ok */Block.__(0, [value]));
}

function fromError(error) {
  return Future$SeprichReFuture.fromValue(/* Error */Block.__(1, [error]));
}

function fromFutureResult(future) {
  return future;
}

function fromFuture(future) {
  return Future$SeprichReFuture.map(future, (function (value) {
                return /* Ok */Block.__(0, [value]);
              }));
}

function toFutureResult(future) {
  return future;
}

function toFutureIgnoreResult(future) {
  return Future$SeprichReFuture.map(future, (function (prim) {
                return /* () */0;
              }));
}

function fromJsPromise(jsPromise, errorConverter) {
  return Future$SeprichReFuture.make((function (setter) {
                jsPromise.then((function (value) {
                          return Promise.resolve(Curry._1(setter, /* Ok */Block.__(0, [value])));
                        })).catch((function (error) {
                        return Promise.resolve(Curry._1(setter, /* Error */Block.__(1, [Curry._1(errorConverter, error)])));
                      }));
                return /* () */0;
              }));
}

function toJsPromise(future, errorConverter) {
  return new Promise((function (resolve, reject) {
                Future$SeprichReFuture.effect(future, (function (result) {
                        if (result.tag) {
                          reject(Curry._1(errorConverter, result[0]));
                        } else {
                          resolve(result[0]);
                        }
                        return /* () */0;
                      }));
                return /* () */0;
              }));
}

function convertPromiseErrorToExn(error) {
  var retype = ( function(e) { return e; } );
  try {
    throw retype(error);
  }
  catch (raw_error){
    return Caml_js_exceptions.internalToOCamlException(raw_error);
  }
}

function fromJsPromiseDefault(jsPromise) {
  return fromJsPromise(jsPromise, convertPromiseErrorToExn);
}

function toJsPromiseDefault(future) {
  return toJsPromise(future, (function (x) {
                return x;
              }));
}

function mapOk(future, fn) {
  return Future$SeprichReFuture.map(future, (function (result) {
                if (result.tag) {
                  return /* Error */Block.__(1, [result[0]]);
                } else {
                  return /* Ok */Block.__(0, [Curry._1(fn, result[0])]);
                }
              }));
}

function mapError(future, fn) {
  return Future$SeprichReFuture.map(future, (function (result) {
                if (result.tag) {
                  return /* Error */Block.__(1, [Curry._1(fn, result[0])]);
                } else {
                  return /* Ok */Block.__(0, [result[0]]);
                }
              }));
}

function mapOkResult(future, fn) {
  return Future$SeprichReFuture.map(future, (function (result) {
                if (result.tag) {
                  return /* Error */Block.__(1, [result[0]]);
                } else {
                  return Curry._1(fn, result[0]);
                }
              }));
}

function mapErrorResult(future, fn) {
  return Future$SeprichReFuture.map(future, (function (result) {
                if (result.tag) {
                  return Curry._1(fn, result[0]);
                } else {
                  return /* Ok */Block.__(0, [result[0]]);
                }
              }));
}

function flatMapOk(future, fn) {
  return Future$SeprichReFuture.flatMap(future, (function (result) {
                if (result.tag) {
                  return Future$SeprichReFuture.fromValue(/* Error */Block.__(1, [result[0]]));
                } else {
                  return Curry._1(fn, result[0]);
                }
              }));
}

function flatMapError(future, fn) {
  return Future$SeprichReFuture.flatMap(future, (function (result) {
                if (result.tag) {
                  return Curry._1(fn, result[0]);
                } else {
                  return Future$SeprichReFuture.fromValue(/* Ok */Block.__(0, [result[0]]));
                }
              }));
}

function effectOk(future, fn) {
  return Future$SeprichReFuture.effect(future, (function (result) {
                if (result.tag) {
                  return /* () */0;
                } else {
                  return Curry._1(fn, result[0]);
                }
              }));
}

function effectError(future, fn) {
  return Future$SeprichReFuture.effect(future, (function (result) {
                if (result.tag) {
                  return Curry._1(fn, result[0]);
                } else {
                  return /* () */0;
                }
              }));
}

function waitEffectOk(future, fn) {
  return Future$SeprichReFuture.waitEffect(future, (function (result) {
                if (result.tag) {
                  return Future$SeprichReFuture.fromValue(/* () */0);
                } else {
                  return Curry._1(fn, result[0]);
                }
              }));
}

function waitEffectError(future, fn) {
  return Future$SeprichReFuture.waitEffect(future, (function (result) {
                if (result.tag) {
                  return Curry._1(fn, result[0]);
                } else {
                  return Future$SeprichReFuture.fromValue(/* () */0);
                }
              }));
}

function allOk(futures) {
  var reducer = function (accum, item) {
    if (!accum.tag && !item.tag) {
      return /* Ok */Block.__(0, [Belt_List.add(accum[0], item[0])]);
    }
    if (item.tag) {
      return /* Error */Block.__(1, [item[0]]);
    } else {
      return /* Error */Block.__(1, [accum[0]]);
    }
  };
  return Future$SeprichReFuture.map(Future$SeprichReFuture.all(futures), (function (results) {
                return Belt_List.reduceReverse(results, /* Ok */Block.__(0, [/* [] */0]), reducer);
              }));
}

function mapResult2(f1, f2, fn) {
  return Future$SeprichReFuture.flatMap(f1, (function (r1) {
                return Future$SeprichReFuture.map(f2, (function (r2) {
                              return Curry._2(fn, r1, r2);
                            }));
              }));
}

function mapResult3(f1, f2, f3, fn) {
  return Future$SeprichReFuture.flatMap(f1, (function (r1) {
                return Future$SeprichReFuture.flatMap(f2, (function (r2) {
                              return Future$SeprichReFuture.map(f3, (function (r3) {
                                            return Curry._3(fn, r1, r2, r3);
                                          }));
                            }));
              }));
}

function mapResult4(f1, f2, f3, f4, fn) {
  return Future$SeprichReFuture.flatMap(f1, (function (r1) {
                return Future$SeprichReFuture.flatMap(f2, (function (r2) {
                              return Future$SeprichReFuture.flatMap(f3, (function (r3) {
                                            return Future$SeprichReFuture.map(f4, (function (r4) {
                                                          return Curry._4(fn, r1, r2, r3, r4);
                                                        }));
                                          }));
                            }));
              }));
}

function mapResult5(f1, f2, f3, f4, f5, fn) {
  return mapResult2(mapResult4(f1, f2, f3, f4, (function (a, b, c, d) {
                    return /* tuple */[
                            a,
                            b,
                            c,
                            d
                          ];
                  })), f5, (function (param, r5) {
                return Curry._5(fn, param[0], param[1], param[2], param[3], r5);
              }));
}

function mapResult6(f1, f2, f3, f4, f5, f6, fn) {
  return mapResult3(mapResult4(f1, f2, f3, f4, (function (a, b, c, d) {
                    return /* tuple */[
                            a,
                            b,
                            c,
                            d
                          ];
                  })), f5, f6, (function (param, r5, r6) {
                return Curry._6(fn, param[0], param[1], param[2], param[3], r5, r6);
              }));
}

function mapResult7(f1, f2, f3, f4, f5, f6, f7, fn) {
  return mapResult4(mapResult4(f1, f2, f3, f4, (function (a, b, c, d) {
                    return /* tuple */[
                            a,
                            b,
                            c,
                            d
                          ];
                  })), f5, f6, f7, (function (param, r5, r6, r7) {
                return Curry._7(fn, param[0], param[1], param[2], param[3], r5, r6, r7);
              }));
}

function mapResult8(f1, f2, f3, f4, f5, f6, f7, f8, fn) {
  return mapResult2(mapResult4(f1, f2, f3, f4, (function (a, b, c, d) {
                    return /* tuple */[
                            a,
                            b,
                            c,
                            d
                          ];
                  })), mapResult4(f5, f6, f7, f8, (function (a, b, c, d) {
                    return /* tuple */[
                            a,
                            b,
                            c,
                            d
                          ];
                  })), (function (param, param$1) {
                return Curry._8(fn, param[0], param[1], param[2], param[3], param$1[0], param$1[1], param$1[2], param$1[3]);
              }));
}

function combineOk2(f1, f2) {
  return flatMapOk(f1, (function (v1) {
                return mapOk(f2, (function (v2) {
                              return /* tuple */[
                                      v1,
                                      v2
                                    ];
                            }));
              }));
}

function combineOk3(f1, f2, f3) {
  return flatMapOk(f1, (function (v1) {
                return flatMapOk(f2, (function (v2) {
                              return mapOk(f3, (function (v3) {
                                            return /* tuple */[
                                                    v1,
                                                    v2,
                                                    v3
                                                  ];
                                          }));
                            }));
              }));
}

function combineOk4(f1, f2, f3, f4) {
  return flatMapOk(f1, (function (v1) {
                return flatMapOk(f2, (function (v2) {
                              return flatMapOk(f3, (function (v3) {
                                            return mapOk(f4, (function (v4) {
                                                          return /* tuple */[
                                                                  v1,
                                                                  v2,
                                                                  v3,
                                                                  v4
                                                                ];
                                                        }));
                                          }));
                            }));
              }));
}

function combineOk5(f1, f2, f3, f4, f5) {
  return mapOk(combineOk2(combineOk4(f1, f2, f3, f4), f5), (function (param) {
                var match = param[0];
                return /* tuple */[
                        match[0],
                        match[1],
                        match[2],
                        match[3],
                        param[1]
                      ];
              }));
}

function combineOk6(f1, f2, f3, f4, f5, f6) {
  return mapOk(combineOk3(combineOk4(f1, f2, f3, f4), f5, f6), (function (param) {
                var match = param[0];
                return /* tuple */[
                        match[0],
                        match[1],
                        match[2],
                        match[3],
                        param[1],
                        param[2]
                      ];
              }));
}

function combineOk7(f1, f2, f3, f4, f5, f6, f7) {
  return mapOk(combineOk4(combineOk4(f1, f2, f3, f4), f5, f6, f7), (function (param) {
                var match = param[0];
                return /* tuple */[
                        match[0],
                        match[1],
                        match[2],
                        match[3],
                        param[1],
                        param[2],
                        param[3]
                      ];
              }));
}

function combineOk8(f1, f2, f3, f4, f5, f6, f7, f8) {
  return mapOk(combineOk2(combineOk4(f1, f2, f3, f4), combineOk4(f5, f6, f7, f8)), (function (param) {
                var match = param[1];
                var match$1 = param[0];
                return /* tuple */[
                        match$1[0],
                        match$1[1],
                        match$1[2],
                        match$1[3],
                        match[0],
                        match[1],
                        match[2],
                        match[3]
                      ];
              }));
}

function getOk(future, fn) {
  return Future$SeprichReFuture.get(future, (function (result) {
                if (result.tag) {
                  return /* () */0;
                } else {
                  return Curry._1(fn, result[0]);
                }
              }));
}

function getError(future, fn) {
  return Future$SeprichReFuture.get(future, (function (result) {
                if (result.tag) {
                  return Curry._1(fn, result[0]);
                } else {
                  return /* () */0;
                }
              }));
}

var fromResult = Future$SeprichReFuture.fromValue;

var getResult = Future$SeprichReFuture.get;

var mapResult = Future$SeprichReFuture.map;

var flatMapResult = Future$SeprichReFuture.flatMap;

var effectResult = Future$SeprichReFuture.effect;

var waitEffectResult = Future$SeprichReFuture.waitEffect;

var allToFuture = Future$SeprichReFuture.all;

exports.make = make;
exports.fromJsPromiseDefault = fromJsPromiseDefault;
exports.toJsPromiseDefault = toJsPromiseDefault;
exports.fromJsPromise = fromJsPromise;
exports.toJsPromise = toJsPromise;
exports.fromValue = fromValue;
exports.fromError = fromError;
exports.fromResult = fromResult;
exports.fromFutureResult = fromFutureResult;
exports.fromFuture = fromFuture;
exports.toFutureResult = toFutureResult;
exports.toFutureIgnoreResult = toFutureIgnoreResult;
exports.getOk = getOk;
exports.getError = getError;
exports.getResult = getResult;
exports.mapOk = mapOk;
exports.mapError = mapError;
exports.mapOkResult = mapOkResult;
exports.mapErrorResult = mapErrorResult;
exports.mapResult = mapResult;
exports.flatMapOk = flatMapOk;
exports.flatMapError = flatMapError;
exports.flatMapResult = flatMapResult;
exports.effectOk = effectOk;
exports.effectError = effectError;
exports.effectResult = effectResult;
exports.waitEffectOk = waitEffectOk;
exports.waitEffectError = waitEffectError;
exports.waitEffectResult = waitEffectResult;
exports.allOk = allOk;
exports.allToFuture = allToFuture;
exports.combineOk2 = combineOk2;
exports.combineOk3 = combineOk3;
exports.combineOk4 = combineOk4;
exports.combineOk5 = combineOk5;
exports.combineOk6 = combineOk6;
exports.combineOk7 = combineOk7;
exports.combineOk8 = combineOk8;
exports.mapResult2 = mapResult2;
exports.mapResult3 = mapResult3;
exports.mapResult4 = mapResult4;
exports.mapResult5 = mapResult5;
exports.mapResult6 = mapResult6;
exports.mapResult7 = mapResult7;
exports.mapResult8 = mapResult8;
/* No side effect */
